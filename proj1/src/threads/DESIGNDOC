			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Kacie Anderson <kqanders@usc.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

** Two additions to "struct thread" in "thread.h":
	struct list_elem blockedListElem // A list element for blockedList 
    int64_t unblockTime // Time at which current thread should be unblocked

** One new static variable in "timer.c":
	static struct list blockedList; // List of blocked threads to be woken up

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

** First, check to make sure that the value of "ticks" (denoting timer ticks) is 
	nonnegative (sanity check).

	Obtain the current thread ("temp") and define "unblockTime," the time at which this current thread 
	should be "woken up," i.e. unblocked (given by start + ticks). 

	Add the current thread to "blockedList," which is the list of threads waiting to be "woken up."
	blockedList is accessible to all threads and thus modification by those threads. Thus, briefly 
	disabling interrupts is necessary so the addition of this current thread to blockedList 
	happens correctly.

	The addition of the current thread to blockedList is done via the list_insert_ordered 
	function and a helper function I wrote in "timer.c" called "compareUnblockTimes." These ensure
	that blockedList is ordered from smallest to largest unblockTime. 

 After the current thread is added to blockedList, it is blocked (thread_block). Then, interrupts
 are immediately re-enabled.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

** In "timer_sleep," I chose to use the list_insert_ordered and compareUnblockTimes functions specifically 
	to minimize the amount of time spent in the timer interrupt handler. 
	Since blockedList is ordered by smallest to largest unblockTime, the timer interrupt handler only needs 
	to look at the first thread on the list instead of sorting through it each time.
	The timer interrupt handler checks the first thread on blockedList, and if that thread's unblockTime is 
	smaller than the current time, it is woken up & popped off blockedList. Then, the timer interrupt handler 
	checks the new first thread on blockedList, and so on.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

** In "timer_sleep," the goal is to give access to "blockedList" and the subsequent "thread_block" line to 
	only one thread at a time. To make sure multiple threads do not simultaneously have access to these 
	instructions, I briefly disabled interrupts in "timer_sleep" only while the current thread is being added 
	to blockedList and, directly after, while the current thread is being blocked. Then, interrupts are 
	re-enabled.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

** The potential race condition from a timer interrupt would be due to its modification of "blockedList," which
	is shared between the timer interrupt handler and "timer_sleep." The fact that I disabled interrupts briefly
	in "timer_sleep" during the addition to blockedList & subsequent thread_block of the current thread ensures
	that timer interrupts will not cause a race condition.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

** One of the powerpoints listed under "tips for completing project 1" on the course website mentions a 
	"ready queue" and shows a table in which threads are sorted from smallest to largest "wake time." Also, when 
	I looked at "list.h" before beginning the assignment, I noticed how useful the "list_insert_ordered" function 
	would be to implement a sorted list/queue in my design. 

	Based on discussion in lecture and the information in the resources available to me for this project, this 
	design is the only one I can truly consider to implement "timer_sleep" without "busy waits."


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
